// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: ansChan.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnsService_ProcessAnsList_FullMethodName = "/main.AnsService/ProcessAnsList"
)

// AnsServiceClient is the client API for AnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnsServiceClient interface {
	ProcessAnsList(ctx context.Context, in *AnsList, opts ...grpc.CallOption) (*Ans, error)
}

type ansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnsServiceClient(cc grpc.ClientConnInterface) AnsServiceClient {
	return &ansServiceClient{cc}
}

func (c *ansServiceClient) ProcessAnsList(ctx context.Context, in *AnsList, opts ...grpc.CallOption) (*Ans, error) {
	out := new(Ans)
	err := c.cc.Invoke(ctx, AnsService_ProcessAnsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnsServiceServer is the server API for AnsService service.
// All implementations must embed UnimplementedAnsServiceServer
// for forward compatibility
type AnsServiceServer interface {
	ProcessAnsList(context.Context, *AnsList) (*Ans, error)
	mustEmbedUnimplementedAnsServiceServer()
}

// UnimplementedAnsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnsServiceServer struct {
}

func (UnimplementedAnsServiceServer) ProcessAnsList(context.Context, *AnsList) (*Ans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAnsList not implemented")
}
func (UnimplementedAnsServiceServer) mustEmbedUnimplementedAnsServiceServer() {}

// UnsafeAnsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnsServiceServer will
// result in compilation errors.
type UnsafeAnsServiceServer interface {
	mustEmbedUnimplementedAnsServiceServer()
}

func RegisterAnsServiceServer(s grpc.ServiceRegistrar, srv AnsServiceServer) {
	s.RegisterService(&AnsService_ServiceDesc, srv)
}

func _AnsService_ProcessAnsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnsServiceServer).ProcessAnsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnsService_ProcessAnsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnsServiceServer).ProcessAnsList(ctx, req.(*AnsList))
	}
	return interceptor(ctx, in, info, handler)
}

// AnsService_ServiceDesc is the grpc.ServiceDesc for AnsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.AnsService",
	HandlerType: (*AnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessAnsList",
			Handler:    _AnsService_ProcessAnsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ansChan.proto",
}
